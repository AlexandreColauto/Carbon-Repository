 async function getStakes(_userAddress, _signer) {
    const stakeContract = new ethers.Contract(
      stakeAddrs,
      StakingRewards.abi,
      _signer
    );
    const userStakes = await stakeContract.retrieveUserStakes(_userAddress);
    const stakesArray = [];
    await Promise.all(userStakes.map(async (stake) => {
      if (!stake.active) return;
      const _stake = {
        _createdDate: stake.createdDate.toString(),
        _endDate: stake.endDate.toString(),
        amount: ethers.utils.formatEther(stake.amount.toString()),
        stakeId: stake.stakeId.toString(),
      };
      let _dateString = new Date(
        parseInt(_stake._createdDate) * 1000
      ).toLocaleDateString();
      _stake.createdDate = _dateString;
      _dateString = new Date(
        parseInt(_stake._endDate) * 1000
      ).toLocaleDateString();
      _stake.endDate = _dateString;

      const stakeLength = (_stake._endDate - _stake._createdDate) * 1000;
      const elapsed = Date.now() - _stake._createdDate * 1000;
      let progress;
      if (elapsed < stakeLength) {
        progress = elapsed / stakeLength;
      }
      _stake.progress = Math.round(progress * 100) ;

      const year = 31536000000;
      const estmReward = ((_stake.amount * elapsed) / year) * 0.11;
      _stake.estmReward = estmReward;
      
      const burnAmount = _stake.amount * (1 - progress);
      _stake.burnAmount = burnAmount;
      const stakeAmount = parseInt(ethers.utils.formatUnits(stake.amount,'ether'))
      const rate =  await stakeContract.rateCorrection(stakeLength/1000,stakeAmount)
      const expecReward = ((_stake.amount * stakeLength) / year) * rate/10000;
      console.log(stakeLength)
      console.log(year)
      console.log(rate.toString())
      console.log(expecReward)
      const apr = expecReward/_stake.amount;
      
      _stake.expecReward = expecReward;
      _stake.apr = rate.toNumber()/100;

      stakesArray.push(_stake);
    }));
    setUserStakes(stakesArray);
  }